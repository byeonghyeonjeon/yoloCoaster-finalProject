<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board">
	
	<!-- 목록 총 개수 조회 (전체 조회)-->
	<select id="adminBoardWait" parameterType="java.util.Map" resultType="integer">
		SELECT
		COUNT(*)
		FROM board
		where pboard_seq = #{pboard_seq}
		and  board_reply = #{condition}
	</select>
	
	<select id="todayRegBoard" parameterType="java.util.Map" resultType="integer">
	<![CDATA[
		SELECT
		COUNT(*)
		FROM board
		WHERE pboard_seq = #{pboard_seq}
		and board_dt >= trunc(sysdate-1)
	]]>
	</select>
	
	
	
	
	<!-- 목록 총 개수 조회 (전체 조회)-->
	<select id="selectBoardCnt" parameterType="integer" resultType="integer">
		SELECT
		COUNT(*)
		FROM board
		where pboard_seq = #{pboard_seq}
		and  board_st = 'Y'
	</select>
	
	<!-- 관리자용 페이지네이션 -->
	<select id="adminSelectBoardCnt" parameterType="integer" resultType="integer">
		SELECT
		COUNT(*)
		FROM board
		where pboard_seq = #{param}
	</select>
	
	<!-- 관리자용 페이지네이션 -->
	<select id="adminSelectListboard" parameterType="PageVO" resultType="BoardVO">
	<![CDATA[
		SELECT X.*
		FROM 
			   (SELECT ROWNUM rnum, A.* FROM 
				(SELECT * FROM board
      		where pboard_seq = #{pboard_seq}
				ORDER BY board_seq DESC) A
			   	WHERE ROWNUM <= #{pageNo}*10) X
	 	WHERE 
	 		X.rnum >= (#{pageNo}-1)*10 + 1
	]]>
	</select>
	
	<!-- 목록 총 개수 조회 (String)-->
	<select id="selectBoardCntStr" parameterType="String" resultType="integer">
		SELECT
		COUNT(*)
		FROM bookmark_area
		where mem_id = #{mem_id}
	</select>
	
	<!-- 검색어 목록 총 개수 조회 (String)-->
	<select id="selectBoardCntKeyword" parameterType="java.util.Map" resultType="integer">
		<![CDATA[
			SELECT
			COUNT(*)
			FROM board
			where pboard_seq = #{pboard}
			and board_title like #{keyword}
		]]>
	</select>
	
	<!-- 해당 게시판의 검색결과 페이지의 모든 글을 출력 -->
	<select id="getboardListKeyword" parameterType="java.util.Map" resultType="BoardVO">
	<![CDATA[
		SELECT X.*
		FROM 
			   (SELECT ROWNUM rnum, A.* FROM 
				(SELECT * FROM board
      		where pboard_seq = #{pboard_seq,jdbcType=VARCHAR}
      			and board_st='Y'
      			and board_title like #{keyword}
				ORDER BY board_seq DESC) A
			   	WHERE ROWNUM <= #{pageNo}*10) X
	 	WHERE 
	 		X.rnum >= (#{pageNo}-1)*10 + 1
	]]>
	</select>
	
	<!-- 해당 게시판의 해당 페이지의 모든 글을 출력 -->
	<select id="getboardList" parameterType="PageVO" resultType="BoardVO">
	<![CDATA[
		SELECT X.*
		FROM 
			   (SELECT ROWNUM rnum, A.* FROM 
				(SELECT * FROM board
      		where pboard_seq = #{pboard_seq}
      			and board_st='Y'
				ORDER BY board_seq DESC) A
			   	WHERE ROWNUM <= #{pageNo}*10) X
	 	WHERE 
	 		X.rnum >= (#{pageNo}-1)*10 + 1
	]]>
	</select>


	<!--qna 게시글 입력 -->
	<insert id="insertBoard" parameterType="BoardVO">
		<selectKey order="BEFORE" keyProperty="board_seq" resultType="int">
			select BOARD_SEQ.nextval from dual
		</selectKey>
	INSERT
	INTO BOARD
	  (    
	    BOARD_SEQ,    PBOARD_SEQ,    
	    BOARD_NOTICE,    BOARD_TITLE,    
	    BOARD_CONTENT,      
	     BOARD_PRIVATE,	    BOARD_MEM_ID,   
	      BOARD_DT,    BOARD_HIT,    BOARD_ST  ,board_reply
	    )
	  VALUES
	  (
	   #{board_seq},    #{pboard_seq},    
	    'N',	    #{board_title,jdbcType=VARCHAR} ,    
	    #{board_content,jdbcType=VARCHAR},   
	    #{board_private,jdbcType=VARCHAR},    #{board_mem_id,jdbcType=VARCHAR},    
	    sysdate,	    0,    'Y','0'
	  )
	</insert>
	
	
	<select id="selectBoard" parameterType="int" resultType="BoardVO">
		SELECT *
		FROM board
		WHERE board_seq = #{board_seq}
	</select>
	
	<!-- 계층형 게시글 입력 -->
	<insert id="insertBoardP" parameterType="BoardVO">
		INSERT INTO BOARD
		    (
		        BOARD_SEQ, BOARD_P_SEQ, BOARD_TBOARD_SEQ,
		        BOARD_GROUP_SEQ, BOARD_TITLE, BOARD_CONTENT,
		        BOARD_REG_DT, BOARD_MEM_ID
		    )
		VALUES
		    (
		        BOARD_SEQ.NEXTVAL, #{board_p_seq}, #{board_tboard_seq},
		        #{board_group_seq}, #{board_title}, #{board_content},
		        SYSDATE, #{board_mem_id}
		    )
	    <selectKey keyProperty="board_seq" resultType="String" order="AFTER">
    		SELECT BOARD_SEQ.CURRVAL FROM DUAL
  		</selectKey>
	</insert>
	
	<!-- 게시글의 모든정보조회(게시글번호이용) -->
	<select id="getBoardInfo" parameterType="String" resultType="BoardVO">
		SELECT *
		FROM BOARD
		WHERE BOARD_SEQ = #{board_seq}
		and board_st='Y'
	</select>
	
	<!-- 게시글 삭제하기(board_del_yn 수정) -->
	<update id="deleteBoard" parameterType="String">
		UPDATE BOARD
		SET board_st = 'N'
		WHERE BOARD_SEQ = #{link}
	</update>
	
	<!-- 게시글 수정하기 -->
	<update id="updateBoard" parameterType="BoardVO">
		UPDATE BOARD
		SET BOARD_TITLE = #{board_title}, BOARD_CONTENT = #{board_content},BOARD_reply = #{board_reply,jdbcType=VARCHAR}
		WHERE BOARD_SEQ = #{board_seq}
	</update>
	
	
	<select id="getBookmarkAreaPageList" parameterType="java.util.Map" resultType="Bookmark_areaVO">
	<![CDATA[
	SELECT X.*
		FROM 
		   (SELECT ROWNUM rnum, A.* FROM 
			(SELECT * FROM bookmark_area
     		 WHERE mem_id = #{mem_id}
			ORDER BY bookmark_area_seq DESC) A
		   	WHERE ROWNUM <= #{pageNo}*10) x
			WHERE X.rnum >= (#{pageNo}-1)*10 + 1
			]]>
	</select>
	
	<update id="updateHit" parameterType="BoardVO">
		<selectKey order="BEFORE" keyProperty="pboard_seq"  resultType="int">
			SELECT
			    board_hit
			FROM
			    board
			where board_seq =#{board_seq}
		</selectKey>
		UPDATE board
	    SET
		        board_hit = (#{pboard_seq}+1)
		WHERE
		    board_seq =#{board_seq}
	</update>
	
	
	<!-- 댓글 등록 -->
	<insert id="insertReply" parameterType="ReplyVO">
	INSERT INTO reply (
	    reply_seq,    board_seq,    reply_member_id,    reply_dt,    reply_content,
	    reply_group,    reply_st, preply_seq,reply_img
	) VALUES (
	    reply_seq.nextval,    #{board_seq},    #{reply_member_id},    sysdate,    #{reply_content},
	    #{reply_group},    'Y',  #{preply_seq},#{reply_img}
	    
	)
	</insert>
	
	<!-- 댓글 수정 -->
	<update id="updateReply" parameterType="ReplyVO">
		UPDATE REPLY
		SET REPLY_CONTENT = #{reply_content}, reply_dt = sysdate
		WHERE reply_member_id = #{reply_member_id}
		AND reply_seq = #{reply_seq}
	</update>
	
	<!-- 댓글 삭제 -->
	<delete id="deleteReply" parameterType="Integer">
		DELETE FROM REPLY 
		WHERE REPLY_SEQ = #{reply_seq}
	</delete>
	
	<!-- 댓글 리스트 조회 -->
	<select id="selectReplyList" parameterType="int" resultType="ReplyVO">
		select * from reply where board_seq = #{link}
	</select>
	
	
	<!-- 즐겨찾기 목록 -->
	<!-- 즐겨찾기 수 -->
	<select id="getBookmarkAreaByMem_idAndContentid" parameterType="Bookmark_areaVO" resultType="int">
		SELECT COUNT(*)
		FROM BOOKMARK_AREA
		WHERE MEM_ID = #{mem_id}
		AND CONTENTID = #{contentid}
	</select>
	
	<!-- 즐겨찾기에 추가 -->
	<insert id="insertBookmarkArea" parameterType="Bookmark_areaVO">
		INSERT INTO BOOKMARK_AREA
			(
				BOOKMARK_AREA_SEQ, MEM_ID, TITLE, SIGUNGUCODE, AREACODE, CONTENTID, FIRSTIMAGE2, LINK
			)
		VALUES
			(
				BOOKMARK_AREA_SEQ.NEXTVAL, #{mem_id}, #{title}, #{sigungucode}, #{areacode}, #{contentid}, #{firstimage2}, #{link}
			)
	</insert>
	
	<!-- 즐겨찾기 목록 조회 -->
	<select id="getBookmarkAreaRightBar" parameterType="java.util.Map" resultType="Bookmark_areaVO">
		<![CDATA[
		SELECT X.*
		FROM 
			(
				SELECT ROWNUM rnum, A.* 
				FROM 
					(
						SELECT * FROM bookmark_area
     		 			WHERE mem_id = #{mem_id}
						ORDER BY bookmark_area_seq DESC
					) A
		   		WHERE ROWNUM <= #{pageNo}*2
		   	) x
			WHERE X.rnum >= (#{pageNo}-1)*2 + 1
		]]>
	</select>
	
	<insert id="insertTag" parameterType="TagVO">
		INSERT INTO tag (
	   	 	tag_seq,    main_board_seq,    contentid,    tag_content
		) VALUES (
		    tag_seq.NEXTVAL,	    #{main_board_seq},	    '0',	   #{tag_content}
		)
	</insert>

	<select id="selectTagList" parameterType="int" resultType="TagVO">
		select * from tag where main_board_seq = #{board_seq}
	</select>
	
	<delete id="deleteTageList" parameterType="int">
		DELETE FROM tag
		WHERE
	  	main_board_seq =#{board_seq}
	</delete>
</mapper>